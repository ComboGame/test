@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    color: white;
    background: #0E0D14;
}

@keyframes animate-homeCircle {
    0% {
        transform: translateY(0);
    }
    50% {
        transform: translateY(-50px);
    }
    100% {
        transform: translateY(0);
    }
}

@keyframes homeCircleOpacity {
    0% {
        opacity: .0;
    }
    50% {
        opacity: .9;
    }
    100% {
        opacity: .0;
    }
}

@keyframes homeCirclePosition {
    0% {
        transform: translate(-550px) scale(.1);
    }
    25% {
        transform: translateY(450px) scale(1);
    }
    50% {
        transform: translate(0px) scale(3.2);
    }
    75% {
        transform: translateY(-450px) scale(1);
    }
    100% {
        transform: translate(550px) scale(.1);
    }
}

.animate-homeCirclesContainer {
    animation: homeCirclesContainer .75s ease-in-out;
}

.animate-homeCircle {
    animation: homeCircleOpacity 20s ease-in-out var(--opacity-delay) infinite alternate, homeCirclePosition 20s ease-in-out var(--position-delay) infinite alternate;
}

.\[--opacity-delay\:-8s\] {
    --opacity-delay: -8s;
}

.\[--position-delay\:-3s\] {
    --position-delay: -3s;
}

@media (min-width: 0px) {
    .hedr {
        margin-left: calc((100% - 305px)/2);
    }
}
@media (min-width: 500px) {
    .hedr {
        margin-left: calc((100% - 460px)/2);
    }
}
@media (min-width: 1280px) {
    .hedr {
        margin-left: calc((50% - 450px)/2);
    }
}


@media (hover: hover) and (pointer: fine) {
    .group:hover .group-hover\:translate-x-6 {
        --tw-translate-x: 1.5rem
    }

    .group:hover .group-hover\:translate-x-0,
    .group:hover .group-hover\:translate-x-6 {
        transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))
    }

    .group:hover .group-hover\:translate-x-0 {
        --tw-translate-x: 0px
    }

    .group:hover .group-hover\:opacity-100 {
        opacity: 1
    }

    .group:hover .group-hover\:opacity-0 {
        opacity: 0
    }
}

@media (prefers-reduced-motion: no-preference) {
    .motion-safe\:translate-x-2 {
        --tw-translate-x: 0.5rem;
        transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))
    }

    @keyframes homeCirclesContainer {
        0% {
            opacity: 0
        }

        to {
            opacity: 1
        }
    }

    .motion-safe\:animate-homeCirclesContainer {
        animation: homeCirclesContainer .75s ease-in-out
    }

    @keyframes homeText {
        0% {
            opacity: 0;
            filter: blur(5px);
            transform: translateY(100px) scale(.9)
        }

        to {
            opacity: 1;
            filter: blur(0);
            transform: translateY(0) scale(1)
        }
    }

    .motion-safe\:animate-homeText {
        animation: homeText .8s cubic-bezier(.4, 0, .2, 1)
    }

    .motion-safe\:scroll-smooth {
        scroll-behavior: smooth
    }

    .motion-safe\:focus-visible\:translate-x-0:focus-visible {
        --tw-translate-x: 0px;
        transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))
    }

    @media (hover: hover) and (pointer: fine) {
        .group:hover .motion-safe\:group-hover\:translate-x-0 {
            --tw-translate-x: 0px;
            transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))
        }
    }
}

@media (prefers-reduced-motion: no-preference) {

    @keyframes homeCircle {
        0% {
            opacity: 0
        }

        to {
            opacity: .5
        }
    }

    .motion-safe\:animate-homeCircle {
        animation: homeCircle .75s ease-in-out
    }
}

#element::-webkit-scrollbar {
    width: 6px;
}

#element::-webkit-scrollbar-track {
    background-color: #121219;
}

#element::-webkit-scrollbar-thumb {
    background-color: #272837;
    border-radius: 100px;
}

::selection {
    background: #ff67b360;
    /* Safari */
}

::-moz-selection {
    background: #ff67b360;
    /* Firefox */
}

.hei717 {
    height: 611px;
}

.prose {
    --tw-text-opacity: 1;
    color: rgb(212 212 216/var(--tw-text-opacity));
    max-width: 80ch
}


.prose :where([class~=lead]):not(:where([class~=not-prose] *)) {
    color: #FFFFFF;
    font-size: 1.25em;
    line-height: 1.6;
    margin-top: 1.2em;
    margin-bottom: 1.2em
}

/* TEXT LINK */
.prose :where(a):not(:where([class~=not-prose] *)) {
    color: #56B3FF;

    font-weight: 500
}

.prose :hover:where(a):not(:where([class~=not-prose] *)) {
    color: #56B3FF;
    text-decoration: underline;
    font-weight: 500
}

.prose :where(strong):not(:where([class~=not-prose] *)) {
    color: #FFFFFF;
    font-weight: 600
}

.prose :where(a strong):not(:where([class~=not-prose] *)) {
    color: inherit
}

.prose :where(blockquote strong):not(:where([class~=not-prose] *)) {
    color: inherit
}

.prose :where(thead th strong):not(:where([class~=not-prose] *)) {
    color: inherit
}

.prose :where(ol):not(:where([class~=not-prose] *)) {
    list-style-type: decimal;
    margin-top: 1.25em;
    margin-bottom: 1.25em;
    padding-left: 1.625em
}

.prose :where(ol[type=A]):not(:where([class~=not-prose] *)) {
    list-style-type: upper-alpha
}

.prose :where(ol[type=a]):not(:where([class~=not-prose] *)) {
    list-style-type: lower-alpha
}

.prose :where(ol[type=A s]):not(:where([class~=not-prose] *)) {
    list-style-type: upper-alpha
}

.prose :where(ol[type=a s]):not(:where([class~=not-prose] *)) {
    list-style-type: lower-alpha
}

.prose :where(ol[type=I]):not(:where([class~=not-prose] *)) {
    list-style-type: upper-roman
}

.prose :where(ol[type=i]):not(:where([class~=not-prose] *)) {
    list-style-type: lower-roman
}

.prose :where(ol[type=I s]):not(:where([class~=not-prose] *)) {
    list-style-type: upper-roman
}

.prose :where(ol[type=i s]):not(:where([class~=not-prose] *)) {
    list-style-type: lower-roman
}

.prose :where(ol[type="1"]):not(:where([class~=not-prose] *)) {
    list-style-type: decimal
}

.prose :where(ul):not(:where([class~=not-prose] *)) {
    list-style-type: disc;
    margin-top: 1.25em;
    margin-bottom: 1.25em;
    padding-left: 1.625em
}

.prose :where(ol>li):not(:where([class~=not-prose] *))::marker {
    font-weight: 400;
    color: #FFFFFF
}

/* MARKERS */
.prose :where(ul>li):not(:where([class~=not-prose] *))::marker {
    color: #FFFFFF;
}

.prose :where(hr):not(:where([class~=not-prose] *)) {
    border-color: #FFFFFF;
    border-top-width: 1px;
    margin-top: 3em;
    margin-bottom: 3em
}

.prose :where(blockquote):not(:where([class~=not-prose] *)) {
    font-weight: 500;
    font-style: italic;
    color: #FFFFFF;
    border-left-width: .25rem;
    border-left-color: #FFFFFF;
    quotes: "\201C" "\201D" "\2018" "\2019";
    margin-top: 1.6em;
    margin-bottom: 1.6em;
    padding-left: 1em
}

.prose :where(blockquote p:first-of-type):not(:where([class~=not-prose] *)):before {
    content: open-quote
}

.prose :where(blockquote p:last-of-type):not(:where([class~=not-prose] *)):after {
    content: close-quote
}

.prose :where(h1):not(:where([class~=not-prose] *)) {
    color: #FFFFFF;
    font-weight: 800;
    font-size: 2.25em;
    margin-top: 0;
    margin-bottom: .8888889em;
    line-height: 1.1111111
}

.prose :where(h1 strong):not(:where([class~=not-prose] *)) {
    font-weight: 900;
    color: inherit
}

.prose :where(h2):not(:where([class~=not-prose] *)) {
    color: #FFFFFF;
    font-weight: 700;
    font-size: 1.5em;
    margin-top: 2em;
    margin-bottom: 1em;
    line-height: 1.3333333
}

.prose :where(h2 strong):not(:where([class~=not-prose] *)) {
    font-weight: 800;
    color: inherit
}

/* H3 */
.prose :where(h3):not(:where([class~=not-prose] *)) {
    color: #FFFFFF;
    font-weight: 600;
    font-size: 1.25em;
    margin-top: 1.6em;
    margin-bottom: .6em;
    line-height: 1.6
}

.prose :where(h3 strong):not(:where([class~=not-prose] *)) {
    font-weight: 700;
    color: inherit
}

.prose :where(h4):not(:where([class~=not-prose] *)) {
    color: #FFFFFF;
    font-weight: 600;
    margin-top: 1.5em;
    margin-bottom: .5em;
    line-height: 1.5
}

.prose :where(h4 strong):not(:where([class~=not-prose] *)) {
    font-weight: 700;
    color: inherit
}

/* .prose :where(img):not(:where([class~=not-prose] *)) {
    margin-top: 2em;
    margin-bottom: 2em
} */

.prose :where(figure>*):not(:where([class~=not-prose] *)) {
    margin-top: 0;
    margin-bottom: 0
}

.prose :where(figcaption):not(:where([class~=not-prose] *)) {
    color: #FFFFFF;
    font-size: .875em;
    line-height: 1.4285714;
    margin-top: .8571429em
}

.prose :where(code):not(:where([class~=not-prose] *)) {
    color: #56B3FF;
    font-weight: 600;
    font-size: .875em
}

.prose :where(code):not(:where([class~=not-prose] *)):before {
    content: "`"
}

.prose :where(code):not(:where([class~=not-prose] *)):after {
    content: "`"
}

.prose :where(a code):not(:where([class~=not-prose] *)) {
    color: inherit
}

.prose :where(h1 code):not(:where([class~=not-prose] *)) {
    color: inherit
}

.prose :where(h2 code):not(:where([class~=not-prose] *)) {
    color: inherit;
    font-size: .875em
}

.prose :where(h3 code):not(:where([class~=not-prose] *)) {
    color: inherit;
    font-size: .9em
}

.prose :where(h4 code):not(:where([class~=not-prose] *)) {
    color: inherit
}

.prose :where(blockquote code):not(:where([class~=not-prose] *)) {
    color: inherit
}

.prose :where(thead th code):not(:where([class~=not-prose] *)) {
    color: inherit
}

.prose :where(pre):not(:where([class~=not-prose] *)) {
    color: #FFFFFF;
    background-color: #FFFFFF;
    overflow-x: auto;
    font-weight: 400;
    font-size: .875em;
    line-height: 1.7142857;
    margin-top: 1.7142857em;
    margin-bottom: 1.7142857em;
    border-radius: .375rem;
    padding: .8571429em 1.1428571em
}

.prose :where(pre code):not(:where([class~=not-prose] *)) {
    background-color: transparent;
    border-width: 0;
    border-radius: 0;
    padding: 0;
    font-weight: inherit;
    color: inherit;
    font-size: inherit;
    font-family: inherit;
    line-height: inherit
}

.prose :where(pre code):not(:where([class~=not-prose] *)):before {
    content: none
}

.prose :where(pre code):not(:where([class~=not-prose] *)):after {
    content: none
}

.prose :where(table):not(:where([class~=not-prose] *)) {
    width: 100%;
    table-layout: auto;
    text-align: left;
    margin-top: 2em;
    margin-bottom: 2em;
    font-size: .875em;
    line-height: 1.7142857
}

.prose :where(thead):not(:where([class~=not-prose] *)) {
    border-bottom-width: 1px;
    border-bottom-color: #52525b
}

.prose :where(thead th):not(:where([class~=not-prose] *)) {
    color: #FFFFFF;
    font-weight: 600;
    vertical-align: bottom;
    padding-right: .5714286em;
    padding-bottom: .5714286em;
    padding-left: .5714286em
}

.prose :where(tbody tr):not(:where([class~=not-prose] *)) {
    border-bottom-width: 1px;
    border-bottom-color: #52525b
}

.prose :where(tbody tr:last-child):not(:where([class~=not-prose] *)) {
    border-bottom-width: 0
}

.prose :where(tbody td):not(:where([class~=not-prose] *)) {
    vertical-align: baseline
}

.prose :where(tfoot):not(:where([class~=not-prose] *)) {
    border-top-width: 1px;
    border-top-color: #FFFFFF
}

.prose :where(tfoot td):not(:where([class~=not-prose] *)) {
    vertical-align: top
}

.prose {
    font-size: 1rem;
    line-height: 1.75
}

.prose :where(p):not(:where([class~=not-prose] *)) {
    margin-top: 1.25em;
    margin-bottom: 1.25em
}

.prose :where(video):not(:where([class~=not-prose] *)) {
    margin-top: 2em;
    margin-bottom: 2em
}

.prose :where(figure):not(:where([class~=not-prose] *)) {
    margin-top: 2em;
    margin-bottom: 2em
}

.prose :where(li):not(:where([class~=not-prose] *)) {
    margin-top: .5em;
    margin-bottom: .5em
}

.prose :where(ol>li):not(:where([class~=not-prose] *)) {
    padding-left: .375em
}

.prose :where(ul>li):not(:where([class~=not-prose] *)) {
    padding-left: .375em
}

.prose :where(.prose>ul>li p):not(:where([class~=not-prose] *)) {
    margin-top: .75em;
    margin-bottom: .75em
}

.prose :where(.prose>ul>li>:first-child):not(:where([class~=not-prose] *)) {
    margin-top: 1.25em
}

.prose :where(.prose>ul>li>:last-child):not(:where([class~=not-prose] *)) {
    margin-bottom: 1.25em
}

.prose :where(.prose>ol>li>:first-child):not(:where([class~=not-prose] *)) {
    margin-top: 1.25em
}

.prose :where(.prose>ol>li>:last-child):not(:where([class~=not-prose] *)) {
    margin-bottom: 1.25em
}

.prose :where(ul ul, ul ol, ol ul, ol ol):not(:where([class~=not-prose] *)) {
    margin-top: .75em;
    margin-bottom: .75em
}

.prose :where(hr+*):not(:where([class~=not-prose] *)) {
    margin-top: 0
}

.prose :where(h2+*):not(:where([class~=not-prose] *)) {
    margin-top: 0
}

.prose :where(h3+*):not(:where([class~=not-prose] *)) {
    margin-top: 0
}

.prose :where(h4+*):not(:where([class~=not-prose] *)) {
    margin-top: 0
}

.prose :where(thead th:first-child):not(:where([class~=not-prose] *)) {
    padding-left: 0
}

.prose :where(thead th:last-child):not(:where([class~=not-prose] *)) {
    padding-right: 0
}

.prose :where(tbody td, tfoot td):not(:where([class~=not-prose] *)) {
    padding: .5714286em
}

.prose :where(tbody td:first-child, tfoot td:first-child):not(:where([class~=not-prose] *)) {
    padding-left: 0
}

.prose :where(tbody td:last-child, tfoot td:last-child):not(:where([class~=not-prose] *)) {
    padding-right: 0
}

.prose :where(.prose>:first-child):not(:where([class~=not-prose] *)) {
    margin-top: 0
}

.prose :where(.prose>:last-child):not(:where([class~=not-prose] *)) {
    margin-bottom: 0
}

